//Equal Sum Partition Problem
/*
Given an array of n elements, find out if the array can be partitioned into two different arrays 
having their sum equal to each other.
Similiar to Subset Sum Problem
An array can only be partitioned into two subsets if the sum of all it's elements is even;
If it's odd partition is not possible
*/ 

#include<stdio.h>

int equalsumpartition(int arr[],int n){
	int i,sum=0;
	for(i=0;i<n;i++){
		sum+=arr[i];
	}
	if(sum%2!=0)
	return 0;
	else
	return subsetsum(arr,n,sum/2);
}

int subsetsum(int arr[],int n,int sum){
	 int i,j;
	 int dp[n+1][sum+1];
	 
	 //Initialization
	 for(i=0;i<=n;i++)
	 dp[i][0]=1;
	 for(i=1;i<=sum;i++)
	 dp[0][i]=0;
	 
	 for(i=1;i<=n;i++){
	 	for(j=1;j<=sum;j++){
	 		if(arr[i-1]<=j)
	 		dp[i][j]=(dp[i-1][j-arr[i-1]] || dp[i-1][j]);
	 		else
	 		dp[i][j]=dp[i-1][j];
		 }
	 }
		return dp[n][sum];
}

int main(){
	int n,i,res;
	printf("Enter the size of the array: ");
	scanf("%d",&n);
	int arr[n];
	printf("Enter the elements of the array: ");
	for(i=0;i<n;i++)
	scanf("%d",&arr[i]);
	res=equalsumpartition(arr,n);
	if(res==0)
	printf("Equal Partition Not Possible");
	else if(res==1)
	printf("Equal Partition Possible");
	return 0;
}
