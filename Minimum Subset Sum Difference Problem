//Minimum Subset Sum Difference Problem

/*

Given an array of n elements, find the minimum difference possible when the array is partitioned into
two different subsets.
Very similiar to Equal Partition Problem
We First find the range of S1 and S2
Minimize(S2-S1) assuming S2>S1... If we find out S1 we can easily find out S2
Border Cases: An Empty Subset Sum =0  ; Full array subset Sum = Range
S1 and S2 lies between 0 and range 
If we know S1, then S2=Range-S1
Now we have to Minimize (Range-2*S1)
If we take S1 on the left side of Range/2 then S2-S1 will always be absolute.
For Different values of S1 we find out if the given subset sum is possible

*/

#include<stdio.h>
#include<stdbool.h>
#define MIN(a,b) (a<b) ? a : b;
#define INF 99999

//Returns the sum of all elements of an array
int sum(int arr[],int n){
	int i,res=0;
	for(i=0;i<n;i++)
	res+=arr[i];
	return res;
}

//Main Function to calculate Minimum Difference
int minsubsetdiff(int arr[],int n){
	
	int i,j,range;
	range=sum(arr,n);
	
	bool dp[n+1][range+1];
	
	//Initialization
	for(i=0;i<=n;i++)
	dp[i][0]=true;
	for(i=1;i<=range;i++)
	dp[0][i]=false;
	
	//Building up the dp table for all values of range
	for(i=1;i<=n;i++){
		for(j=1;j<=range;j++){
			if(arr[i-1]<=j)
			dp[i][j]=dp[i-1][j] || dp[i-1][j-arr[i-1]];
			else
			dp[i][j]=dp[i-1][j];
		}
	}
	
	int min=INF;
	
	//Selecting the minimum difference for all valid values of range
	for(i=0;i<=range/2;i++){
		if(dp[n][i]==true)
		min=MIN(min,range-2*i);
	}
	
	return min;
}


int main(){
	int n,i,res;
	printf("Enter the size of the array: ");
	scanf("%d",&n);
	int arr[n];
	printf("Enter the elements of the array: ");
	for(i=0;i<n;i++)
	scanf("%d",&arr[i]);
	printf("Minimum Difference: %d",minsubsetdiff(arr,n));
	return 0;
}
